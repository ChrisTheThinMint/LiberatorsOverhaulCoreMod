; THIS FILE CONTAINS ALL THE BEHAVIORS AND MINOR CHANGES FROM A Better AI
; ACTUAL CHARACTER ROOTS ARE IN THE AI CONFIG ONE LEVEL ABOVE

[XComGame.XComGameState_AIPlayerData]
; Effectively removing Downthrottling (steering away pods from active fights)
-DownThrottleUnitCount=4  ; Number of enemies engaged to activate Down Throttling.
+DownThrottleUnitCount=99

; Removal of the artificial limit to number of engaged enemies
-MaxEngagedEnemies[0]=4   ; Rookie
-MaxEngagedEnemies[1]=6   ; Veteran
-MaxEngagedEnemies[2]=6   ; Commander
-MaxEngagedEnemies[3]=99  ; Legend
+MaxEngagedEnemies[0]=99   ; Rookie
+MaxEngagedEnemies[1]=99   ; Veteran
+MaxEngagedEnemies[2]=99   ; Commander
+MaxEngagedEnemies[3]=99   ; Legend

[XComGame.XComGameState_AIGroup]
; Increasing the odds and the distance of a fallback by the last enemy in a pod.
-FallbackChance=0.5f
-UnitInFallbackRangeMeters=5      
+FallbackChance=0.7f 
+UnitInFallbackRangeMeters=8 

; These units can't fall back.
;+FallbackExclusionList=UnitTemplate

[XComGame.XGAIPlayer]
; Removing Panic and similar effects from the "Last Resort" lists. This makes enemies shoot at panicked targets instead of ignoring them.
-LastResortTargetEffects=(EffectName="Panicked")
-LastResortTargetEffects=(EffectName="Berserk")
-LastResortTargetEffects=(EffectName="Obsessed")
-LastResortTargetEffects=(EffectName="Shattered")

[XComGame.XGAIPlayer_TheLost]
-DistributionPercentToXCom=70 ;Remainder percent is set to attack Advent or Aliens.
+DistributionPercentToXCom=50

[XComGame.XGAIBehavior]
; Slight increase to the default distance that aliens try to keep.
-DefaultIdealRange=10.0f
+DefaultIdealRange=12.0f

; Decrease in the desire of aliens to change their current position.
-CURR_TILE_LINGER_PENALTY=0.75
+CURR_TILE_LINGER_PENALTY=0.95

; Increase in the desire of aliens to find cover, especially high cover.
-CALC_MID_COVER_FACTOR=1.0f 
-CALC_FULL_COVER_FACTOR=1.1f 
-CALC_FULL_COVER_FACTOR_POD_LEADER=2.5f
+CALC_MID_COVER_FACTOR=1.5f 
+CALC_FULL_COVER_FACTOR=2.0f 
+CALC_FULL_COVER_FACTOR_POD_LEADER=3f

; NOTE: This is where the movement profiles would go.
; I am keeping them unchanged for now, depending on the global increase to cover weight instead. 
; i want to test the default profiles first before changing them up too much.

; Two new movement profiles, one to facilitate the new Stunlancer behavior, one for very defensive units
+m_arrMoveWeightProfile=(Profile=Stunlancer, fCoverWeight=1f, fDistanceWeight=2.0f, fFlankingWeight=3.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=0.5f, fCloseModifier=1f, fFarModifier=1f, fPriorityDistWeight=1.0f)
+m_arrMoveWeightProfile=(Profile=StayBack, fCoverWeight=2.0f, fDistanceWeight=0.6f, fFlankingWeight=0.1f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=0.3f, fHeightWeight=3.0f, fCloseModifier=0.6f, fFarModifier=2f) 

+m_arrMoveWeightProfile=(Profile=MWP_GrappleSkirm, fCoverWeight=2.0f, fDistanceWeight=1.5f, fFlankingWeight=1.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=1.0f, fAllyVisWeight=0, fHeightWeight=1.0f, fCloseModifier=1.0f, fFarModifier=1.0f)

; Changing Mimic Beacon behavior
-m_arrMoveWeightProfile=(Profile=MWP_MimicBeacon, fCoverWeight=0.5f, fDistanceWeight=1.0f, fFlankingWeight=0.5f, fEnemyVisWeight=0.2f, fEnemyVisWeightPeak1=0.0, fAllyVisWeight=0.2f, fPriorityDistWeight=5.0f, fCloseModifier=2.0f, fFarModifier=0.5f) 
+m_arrMoveWeightProfile=(Profile=MWP_MimicBeacon, fCoverWeight=1.7f, fDistanceWeight=5.0f, fFlankingWeight=2.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=0.0, fAllyVisWeight=1.0f, fPriorityDistWeight=5.0f, fCloseModifier=2.0f, fFarModifier=0.5f)

; making units consider cover when meleeing
;-m_arrMoveWeightProfile=(Profile=MWP_Melee, fCoverWeight=0.1f, fDistanceWeight=1.0f, fFlankingWeight=1.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f, fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)  
;-m_arrMoveWeightProfile=(Profile=MWP_MeleeDefensive, fCoverWeight=0.2f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=-0.5f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)
;-m_arrMoveWeightProfile=(Profile=MWP_MeleeAggressive, fCoverWeight=0.1f, fDistanceWeight=2.0f, fFlankingWeight=2.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=0.5f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)
;
;+m_arrMoveWeightProfile=(Profile=MWP_Melee, fCoverWeight=0.4f, fDistanceWeight=1.0f, fFlankingWeight=1.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f, fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)  
;+m_arrMoveWeightProfile=(Profile=MWP_MeleeDefensive, fCoverWeight=0.6f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=-0.5f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)
;+m_arrMoveWeightProfile=(Profile=MWP_MeleeAggressive, fCoverWeight=0.2f, fDistanceWeight=2.0f, fFlankingWeight=2.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=0.5f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)


; +++ AOE Profiles; don't delete any of the lines, they are needed for AI targeting. If you know what you are doing, you can tweak some of the values
+AoEProfiles=( Profile=GrenadeSingleProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=SmokeScreenProfile,  Ability=ThrowGrenade, bTargetSelf=True, MinTargets=0)
+AoEProfiles=( Profile=FirebreathProfile, Ability=Firebreath, bIgnoreSelfDamage=True, MinTargets=2, bRequireLoS=1) 
+AoEProfiles=( Profile=ChrysSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=True, MinTargets=1, bRequireLoS=1) ; ChrysSpit is a singletarget ability. So don't change MinTargets on this one...
+AoEProfiles=( Profile=SmokeRainProfile,  Ability=SmokeRain, bTargetAllies=True, bTargetEnemy=false, bUsePrecomputePath=1, bRequireLoS=1)
+AoEProfiles=( Profile=SmokeGrenadeProfile,  Ability=ThrowGrenade, bTargetAllies=True, bTargetEnemy=false, bUsePrecomputePath=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=RocketLauncherProfile_prio, Ability=RocketLauncher, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=RocketLauncherProfile_norm, Ability=RocketLauncher, bUsePrecomputePath=1, bRequireLoS=1) 
+AoEProfiles=( Profile=RocketLauncherProfile_aggro, Ability=RocketLauncher, bUsePrecomputePath=1, MinTargets=1, bRequireLoS=1) 
+AoEProfiles=( Profile=GrenadeLauncherProfile_prio, Ability=LaunchGrenade, bUsePrecomputePath=1, MinTargets=3, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeLauncherProfile_norm, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeLauncherProfile_aggro, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=BlazingPinionsProfile_aggro, Ability=BlazingPinionsStage1, MinTargets=1, bFailOnObjectiveFire=False)

; adding the requirement for LoS to vanilla AoE profiles
-AoEProfiles=( Profile=GrenadeProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1)
-AoEProfiles=( Profile=GrenadeAggressiveProfile, Ability=ThrowGrenade, bUsePrecomputePath=1) 
-AoEProfiles=( Profile=GrenadePanickedProfile,  Ability=ThrowGrenade, bTargetAllies=1, bTargetCivilians=1, bUsePrecomputePath=1, MinTargets=1, bRequirePotentialTarget=1)
-AoEProfiles=( Profile=GrenadeMindControlledProfile,  Ability=ThrowGrenade, bTargetSelf=1, bUsePrecomputePath=1)
-AoEProfiles=( Profile=AcidBlobProfile, Ability=AcidBlob, bFailOnFriendlyFire=1, bIgnoreSelfDamage=1)
-AoEProfiles=( Profile=PoisonSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1)
-AoEProfiles=( Profile=PoisonSpitSingleProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1)
-AoEProfiles=( Profile=MicroMissilesProfile, bUsePrecomputePath=1, Ability=MicroMissiles)
-AoEProfiles=( Profile=MicroMissilesProfileMk2, bUsePrecomputePath=1, Ability=MicroMissiles, MinTargets=1)
-AoEProfiles=( Profile=PsiRiftProfile, Ability=PsiDimensionalRiftStage1, MinTargets=3, bFailOnFriendlyFire=1, bFailOnObjectiveFire=False)
-AoEProfiles=( Profile=PsiBombProfile, Ability=PsiBombStage1, bIgnoreSelfDamage=False, MinTargets=1)
-AoEProfiles=( Profile=NullLanceProfile, Ability=NullLance, MinTargets=1, bRequirePotentialTarget=1) 
-AoEProfiles=( Profile=HarborWavePrefTargetProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, MinTargets=2, bTestTargetEffectsApply=true)
-AoEProfiles=( Profile=HarborWaveProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bTargetTheLost=1, MinTargets=1, bTestTargetEffectsApply=true)
-AoEProfiles=( Profile=MountainMistPreferred, Ability=ThrowGrenade, bFailOnObjectiveFire=false, bUsePrecomputePath=1) 
-AoEProfiles=( Profile=MountainMistAny, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnObjectiveFire=false, MinTargets=1) 
-AoEProfiles=( Profile=GrenadeProfileAny, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1)

+AoEProfiles=( Profile=GrenadeProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeAggressiveProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bRequireLoS=1) 
+AoEProfiles=( Profile=GrenadePanickedProfile,  Ability=ThrowGrenade, bTargetAllies=1, bTargetCivilians=1, bUsePrecomputePath=1, MinTargets=1, bRequirePotentialTarget=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeMindControlledProfile,  Ability=ThrowGrenade, bTargetSelf=1, bUsePrecomputePath=1, bRequireLoS=1)
+AoEProfiles=( Profile=AcidBlobProfile, Ability=AcidBlob, bFailOnFriendlyFire=1, bIgnoreSelfDamage=1, bRequireLoS=1)
+AoEProfiles=( Profile=PoisonSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, bRequireLoS=1)
+AoEProfiles=( Profile=PoisonSpitSingleProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=MicroMissilesProfile, bUsePrecomputePath=1, Ability=MicroMissiles, bRequireLoS=1)
+AoEProfiles=( Profile=MicroMissilesProfileMk2, bUsePrecomputePath=1, Ability=MicroMissiles, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=PsiRiftProfile, Ability=PsiDimensionalRiftStage1, MinTargets=3, bFailOnFriendlyFire=1, bFailOnObjectiveFire=False, bRequireLoS=1)
+AoEProfiles=( Profile=PsiBombProfile, Ability=PsiBombStage1, bIgnoreSelfDamage=False, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=NullLanceProfile, Ability=NullLance, MinTargets=1, bRequirePotentialTarget=1, bRequireLoS=1) 
+AoEProfiles=( Profile=HarborWavePrefTargetProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, MinTargets=2, bTestTargetEffectsApply=true, bRequireLoS=1)
+AoEProfiles=( Profile=HarborWaveProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bTargetTheLost=1, MinTargets=1, bTestTargetEffectsApply=true, bRequireLoS=1)
+AoEProfiles=( Profile=MountainMistPreferred, Ability=ThrowGrenade, bFailOnObjectiveFire=false, bUsePrecomputePath=1, bRequireLoS=1) 
+AoEProfiles=( Profile=MountainMistAny, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnObjectiveFire=false, MinTargets=1, bRequireLoS=1) 
+AoEProfiles=( Profile=GrenadeProfileAny, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=RemoteStartProfile, Ability=RemoteStart, MinTargets=1, bFailOnFriendlyFire=1, bFailOnObjectiveFire=False)


[XComGame.X2AIBTBehaviorTree]
; new NodeType specifiers defined here.  i.e. NodeType=AddConditions, defined in class X2AIBT_AdditionalAIConditions
+CustomNodes=(NodeTypeString="AddCondition", ExtendsFromType="Condition", ClassName="ABetterADVENTWaroftheChosen.X2AIBT_AdditionalAIConditions")
+CustomNodes=(NodeTypeString="AddAction", ExtendsFromType="Action", ClassName="ABetterADVENTWaroftheChosen.X2AIBT_AdditionalAIActions")

; Only select destructible targets with at least one Enemy in the blast radius that is not The Lost or a minumum of 3 Lost in the blast radius 
; And there are no friendlies in the blast radius
; ATT AI MODDERS: TryStandardShotOnDestructible IS THE ONLY BEHAVIOR TO ADD TO YOUR BT TREES FOR TARGETING DESTRUCTIBLES
+Behaviors=(BehaviorName=TryStandardShotOnDestructible, NodeType=Selector, Child[0]=ShootDestructibleIfAvailable)

+Behaviors=(BehaviorName=ShootDestructibleIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectDestructibleTargetForStandardShot, Child[2]=SelectAbility-StandardShot)
; If multiple opportunities for the AI to blow enemies up, then randomly select one
+Behaviors=(BehaviorName=SelectDestructibleTargetForStandardShot, NodeType=Sequence, Child[0]=SetDestructibleTargetStack-StandardShot, Child[1]=GenericSelectTargetRandomly, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=SetDestructibleTargetStack-StandardShot, NodeType=AddAction)


; +++ Equivs

+EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=StandardMeleeLifeLeech, EquivalentAbilityName[1]=ChryssalidSlashM1, EquivalentAbilityName[2]=ChryssalidSlashM2, EquivalentAbilityName[3]=ChryssalidSlashM3, EquivalentAbilityName[4]=ChryssalidSlashM4)
+EquivalentAbilities=( KeyName=StandardShot, EquivalentAbilityName[0]=AcidShot, EquivalentAbilityName[1]=PistolStandardShot)

+EquivalentAbilities=( KeyName=ChryssalidSlash, EquivalentAbilityName[0]=ChryssalidSlashM1,  EquivalentAbilityName[1]=ChryssalidSlashM2, EquivalentAbilityName[2]=ChryssalidSlashM3, EquivalentAbilityName[3]=ChryssalidSlashM4)
+EquivalentAbilities=( KeyName=PsiReanimation, EquivalentAbilityName[0]=Puppeteering, EquivalentAbilityName[1]=PuppeteeringM3, EquivalentAbilityName[2]=GatekeepersCall)
+EquivalentAbilities=( KeyName=Bind, EquivalentAbilityName[0]=BoaBind, EquivalentAbilityName[1]=PrimeBind)
+EquivalentAbilities=( KeyName=MindSpin, EquivalentAbilityName[0]=AdvMindSpinM1, EquivalentAbilityName[1]=AdvMindSpinM2, EquivalentAbilityName[2]=AdvMindSpinM3, EquivalentAbilityName[3]=SectoidMC, EquivalentAbilityName[4]=PsiMindControl, EquivalentAbilityName[5]=LostMark)
+EquivalentAbilities=( KeyName=PoisonSpit, EquivalentAbilityName[0]=FireSpit)
+EquivalentAbilities=( KeyName=AidProtocol, EquivalentAbilityName[0]=AdvAidProtocol)
+EquivalentAbilities=( KeyName=GremlinHeal, EquivalentAbilityName[0]=AdvGremlinHeal)
+EquivalentAbilities=( KeyName=GremlinRepair, EquivalentAbilityName[0]=AdvGremlinRepair)
+EquivalentAbilities=( KeyName=AcidBlob, EquivalentAbilityName[0]=AndromedonFirebomb, EquivalentAbilityName[1]=AcidBlobM4)
+EquivalentAbilities=( KeyName=MicroMissiles, EquivalentAbilityName[0]=AcidRain, EquivalentAbilityName[1]=FlashRain)
+EquivalentAbilities=( KeyName=DistressCall, EquivalentAbilityName[0]=DistressCallM1, EquivalentAbilityName[1]=DistressCallM2, EquivalentAbilityName[2]=DistressCallM3)
+EquivalentAbilities=( KeyName=GetOverHere, EquivalentAbilityName[0]=BoaGetOverHere, EquivalentAbilityName[1]=PrimeGetOverHere, EquivalentAbilityName[2]=KingGetOverHere)
+EquivalentAbilities=( KeyName=BlazingPinionsStage1, EquivalentAbilityName[0]=ArchonKingBlazingPinionsStage1)
+EquivalentAbilities=( KeyName=NullLance, EquivalentAbilityName[0]=SpinLance)
+EquivalentAbilities=( KeyName=PsiBombStage1, EquivalentAbilityName[0]=BomberPsiBombStage1)
+EquivalentAbilities=( KeyName=HunterGrapple, EquivalentAbilityName[0]=SkirmisherGrapple)

; +++ Vanilla Adjustments

; Lowering chance to overwatch the VIP
-Behaviors=(BehaviorName=ConsiderTakingOverwatchVIP, NodeType=Sequence, Child[0]=VIPVisible, Child[1]=RandOverwatch75_15)
+Behaviors=(BehaviorName=ConsiderTakingOverwatchVIP, NodeType=Sequence, Child[0]=VIPVisible, Child[1]=RandOverwatch30)

; Lowering chance to overwatch the Evac
-Behaviors=(BehaviorName=ConsiderTakingOverwatchEvac, NodeType=Sequence, Child[0]=EvacInRangeAndEnemyVisible, Child[1]=RandOverwatch100_75)
+Behaviors=(BehaviorName=ConsiderTakingOverwatchEvac, NodeType=Sequence, Child[0]=EvacInRangeAndEnemyVisible, Child[1]=RandOverwatch75_50)
+Behaviors=(BehaviorName=RandOverwatch75_50, NodeType=Selector, Child[0]=RandFirstOverwatch75, Child[1]=RandSecondOverwatch50)
+Behaviors=(BehaviorName=RandSecondOverwatch50, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatch50)

; Removing some units from checking for ProtectDeviceTargets
-Behaviors=(BehaviorName=HasValidProtectDeviceTarget, NodeType=Sequence, Child[0]=HasPriorityTargetObject, Child[1]=PriorityTargetNotAttackedThisTurn )
+Behaviors=(BehaviorName=HasValidProtectDeviceTarget, NodeType=Sequence, Child[0]=HasPriorityTargetObject, Child[1]=AllowedToShootDevices, Child[2]=PriorityTargetNotAttackedThisTurn )
; Which ones are removed?
+Behaviors=(BehaviorName=TemplateNameIs-AdvDroneM1, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnAdvDroneM1, NodeType=Inverter, Child[0]=TemplateNameIs-AdvDroneM1)
+Behaviors=(BehaviorName=TemplateNameIs-AdvDroneM2, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnAdvDroneM2, NodeType=Inverter, Child[0]=TemplateNameIs-AdvDroneM2)
+Behaviors=(BehaviorName=TemplateNameIs-Berserker, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnBerserker, NodeType=Inverter, Child[0]=TemplateNameIs-Berserker)
+Behaviors=(BehaviorName=TemplateNameIs-BerserkerFire, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnBerserkerFire, NodeType=Inverter, Child[0]=TemplateNameIs-BerserkerFire)
+Behaviors=(BehaviorName=TemplateNameIs-BerserkerM4, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnBerserkerM4, NodeType=Inverter, Child[0]=TemplateNameIs-BerserkerM4)
+Behaviors=(BehaviorName=TemplateNameIs-BerserkerFireM4, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnBerserkerFireM4, NodeType=Inverter, Child[0]=TemplateNameIs-BerserkerFireM4)
+Behaviors=(BehaviorName=TemplateNameIs-BerserkerQueen, NodeType=Condition)
+Behaviors=(BehaviorName=NotAnBerserkerQueen, NodeType=Inverter, Child[0]=TemplateNameIs-BerserkerQueen)
+Behaviors=(BehaviorName=AllowedToShootDevices, NodeType=Inverter, Child[0]=NotAllowedToShootDevices)
+Behaviors=(BehaviorName=NotAllowedToShootDevices, NodeType=Sequence, Child[0]=TemplateNameIs-BerserkerQueen, Child[1]=TemplateNameIs-AdvDroneM1, Child[2]=TemplateNameIs-AdvDroneM2, Child[3]=TemplateNameIs-Berserker, Child[4]=TemplateNameIs-BerserkerFire, Child[5]=TemplateNameIs-BerserkerM4, Child[6]=TemplateNameIs-BerserkerFireM4)

; --- Prefer Shot on Panic
; Changes the panic AI to "Shoot random enemy" way more often than in vanilla and ABA, so that panic is less equivalent to stun
; Also remove the grenade toss
-Behaviors=(BehaviorName=PanickedAction, NodeType=RandSelector,      Child[0]=ShootRandomEnemyForPanic, Param[0]=5,      Child[1]=TryPanickedGrenadeToss, Param[1]=1,      Child[2]=DoCower, Param[2]=2)
+Behaviors=(BehaviorName=PanickedAction, NodeType=RandSelector,      Child[0]=ShootRandomEnemyForPanic, Param[0]=8,      Child[1]=DoCower, Param[1]=2)

; --- Reroute the vanilla "Move When Flanked" behavior to the more detailed reactions which include counterflanking, desperation shots, point blank counterfire
-Behaviors=(BehaviorName=DoIfFlankedMove, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=FlankedMoveSelector)
+Behaviors=(BehaviorName=DoIfFlankedMove, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=FlankedActionSelector_ABA)

; --- Suppress closest when only bad shots
+Behaviors=(BehaviorName=MaybeSuppressClosestOnBadShot, NodeType=Sequence, Child[0]=AllHitChancesBelow25, Child[1]=RollForSuppress)
+Behaviors=(BehaviorName=RollForSuppress, NodeType=RandFilter, Child[0]=TrySuppressClosest, Param[0]=50)

; --- Remove Lost as viable suppression targets
-Behaviors=(BehaviorName=ScoreUnsuppressedByHitChanceValue, NodeType=Sequence, Child[0]=TargetIsNotSuppressed, Child[1]=AvoidBoundAndPanickedTargets, Child[2]=TargetScoreByHitChanceValue-1)
+Behaviors=(BehaviorName=ScoreUnsuppressedByHitChanceValue, NodeType=Sequence, Child[0]=TargetIsNotSuppressed, Child[1]=TargetScoreInvalidateLost_ABA, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreByHitChanceValue-1)
-Behaviors=(BehaviorName=EvaluateSuppressionTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreUnsuppressedByClosestDistance, Child[2]=TargetScoreInvalidateCivilians, Child[3]=UpdateBestTarget)
+Behaviors=(BehaviorName=EvaluateSuppressionTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreUnsuppressedByClosestDistance, Child[2]=TargetScoreInvalidateLost_ABA, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)

+Behaviors=(BehaviorName=TargetScoreInvalidateLost_ABA, NodeType=Selector, Child[0]=ScoreTargetOutIfLost_ABA, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetOutIfLost_ABA, NodeType=Sequence, Child[0]=IsTargetTeam-eTeam_TheLost, Child[1]=AddToTargetScore_-1000)

; --- Remove Lost as viable targets for Tonguepull
-Behaviors=(BehaviorName=IsInvalidTonguePullTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression);
+Behaviors=(BehaviorName=IsInvalidTonguePullTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression, Child[2]=IsTargetTeam-eTeam_TheLost)
-Behaviors=(BehaviorName=TargetSelectIterationForGetOverHere, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=GenericTargetEvaluations, Child[2]=TargetScoreInvalidateCivilians, Child[3]=SSTargetScoreInvalidTonguePullTargets, Child[4]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetSelectIterationForGetOverHere, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=GenericTargetEvaluations, Child[2]=TargetScoreInvalidateCivilians, Child[3]=TargetScoreInvalidateLost_ABA, Child[4]=SSTargetScoreInvalidTonguePullTargets, Child[5]=UpdateBestTarget)

; --- Standardmelee avoids Lost
;-Behaviors=(BehaviorName=EvaluatePotentialMeleeTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreCivilian, Child[4]=SSCustomMeleeTargetScore, Child[5]=UpdateBestTarget)
;+Behaviors=(BehaviorName=EvaluatePotentialMeleeTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreCivilian, Child[4]=EncourageTargetNonLost, Child[5]=DiscourageTargetLost, Child[6]=SSCustomMeleeTargetScore, Child[7]=UpdateBestTarget)
;+Behaviors=(BehaviorName=DiscourageTargetLost, NodeType=Sequence, Child[0]=IsTargetTeam-eTeam_TheLost, Child[1]=AddToTargetScore_1)
;+Behaviors=(BehaviorName=EncourageTargetNonLost, NodeType=Sequence, Child[0]=TargetIsNotLost, Child[1]=AddToTargetScore_50)

-Behaviors=(BehaviorName=EvaluatePotentialMeleeTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreCivilian, Child[4]=SSCustomMeleeTargetScore, Child[5]=UpdateBestTarget)
+Behaviors=(BehaviorName=EvaluatePotentialMeleeTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=TargetScoreCivilian, Child[4]=EncourageTargetNonLost, Child[5]=DiscourageTargetLost, Child[6]=SSCustomMeleeTargetScore, Child[7]=UpdateBestTarget)
+Behaviors=(BehaviorName=DiscourageTargetLost, NodeType=Successor, Child[0]=ScoreIfLost)
+Behaviors=(BehaviorName=EncourageTargetNonLost, NodeType=Successor, Child[0]=ScoreIfNotLost)
+Behaviors=(BehaviorName=ScoreIfLost, NodeType=Sequence, Child[0]=IsTargetTeam-eTeam_TheLost, Child[1]=AddToTargetScore_1)
+Behaviors=(BehaviorName=ScoreIfNotLost, NodeType=Sequence, Child[0]=TargetIsNotLost, Child[1]=AddToTargetScore_50)  

; --- Stop Terror/Executioner units from ignoring cover
-Behaviors=(BehaviorName=TryTerrorMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=ResetDestinationSearch, Child[3]=SetCiviliansAsEnemiesInMoveCalculation, Child[4]=SetNoCoverMovement, Child[5]=FindDestination-MWP_Fanatic, Child[6]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=TerrorMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetCiviliansAsEnemiesInMoveCalculation, Child[3]=SetNoCoverMovement, Child[4]=FindDestination-MWP_Fanatic, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=TryTerrorMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=ResetDestinationSearch, Child[3]=SetCiviliansAsEnemiesInMoveCalculation, Child[4]=FindDestination-MWP_Aggressive, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=TerrorMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetCiviliansAsEnemiesInMoveCalculation, Child[3]=FindDestination-MWP_Aggressive, Child[4]=SelectAbility-StandardMove)

; +++ Conditions 
; Effects on Target
+Behaviors=(BehaviorName=TargetAffectedByEffect-Overwatch, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Bind, NodeType=Condition)
+Behaviors=(BehaviorName=TargetNotBound, NodeType=Inverter, Child[0]=TargetAffectedByEffect-Bind)
+Behaviors=(BehaviorName=TargetAffectedByEffect-DLC_3SacrificeShield, NodeType=Condition)
+Behaviors=(BehaviorName=TargetNotSacrificeProtected, NodeType=Inverter, Child[0]=TargetAffectedByEffect-DLC_3SacrificeShield)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Confused, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Panicked, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Disoriented, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Berserk, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Shattered, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Dazed, NodeType=Condition)

; Effects on self
+Behaviors=(BehaviorName=AffectedByEffect-Disoriented, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Suppression, NodeType=Condition)
+Behaviors=(BehaviorName=NotSuppressed, NodeType=Inverter, Child[0]=AffectedByEffect-Suppression)
+Behaviors=(BehaviorName=AffectedByEffect-Stealth, NodeType=Condition)
+Behaviors=(BehaviorName=NotStealthed, NodeType=Inverter, Child[0]=AffectedByEffect-Stealth)
+Behaviors=(BehaviorName=HasFullHP, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="100%")
+Behaviors=(BehaviorName=IsDodgy, NodeType=StatCondition, Param[0]=eStat_Dodge, Param[1]=">=", Param[2]="20")
+Behaviors=(BehaviorName=AffectedByEffect-Bind, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-EnergyShieldEffect, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Muton_WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=NotWarCried, NodeType=Inverter, Child[0]=AffectedByEffect-Muton_WarCry)

; Things in sight
+Behaviors=(BehaviorName=MoreThanTwoEnemiesVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">", Param[2]=2)
+Behaviors=(BehaviorName=LessThanTwoVisibleOverwatchers, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]="<", Param[2]="2")
+Behaviors=(BehaviorName=LessThanTwoVisibleSuppressors, NodeType=StatCondition, Param[0]=SuppressorCount, Param[1]="<", Param[2]="2")
; Hit Chance based Conditions
+Behaviors=(BehaviorName=AllHitChancesBelow10, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="10")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow10, NodeType=Inverter, Child[0]=AllHitChancesBelow10)
+Behaviors=(BehaviorName=AllHitChancesBelow25, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="25")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow25, NodeType=Inverter, Child[0]=AllHitChancesBelow25)
+Behaviors=(BehaviorName=AllHitChancesBelow50, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="50")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow50, NodeType=Inverter, Child[0]=AllHitChancesBelow50)
+Behaviors=(BehaviorName=AllHitChancesBelow75, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="75")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow75, NodeType=Inverter, Child[0]=AllHitChancesBelow75)
+Behaviors=(BehaviorName=AllHitChancesBelow90, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="90")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow90, NodeType=Inverter, Child[0]=AllHitChancesBelow90)
; Target specific Hit Chance Conditions
; First two are already in Vanilla, must stay commented out!
;Behaviors=(BehaviorName=TargetHitChanceLow, NodeType=Condition)   <-- CTH < 40
;Behaviors=(BehaviorName=TargetHitChanceHigh, NodeType=Condition)  <-- CTH > 80
+Behaviors=(BehaviorName=TargetHitChanceNotLow, NodeType=Inverter, Child[0]=TargetHitChanceLow) ; <-- CTH > 40
+Behaviors=(BehaviorName=TargetHitChanceNotHigh, NodeType=Inverter, Child[0]=TargetHitChanceHigh) ; <-- CTH < 80
; Mission Type: Ambush
+Behaviors=(BehaviorName=IsMissionOfType-CovertEscape, NodeType=Condition)
+Behaviors=(BehaviorName=NotAmbushMission, NodeType=Inverter, Child[0]=IsMissionOfType-CovertEscape)
; Active Team
;first two are from vanilla, for reference
;Behaviors=(BehaviorName=IsActiveTeam-eTeam_XCom, NodeType=Condition)
;Behaviors=(BehaviorName=NotActiveTeamXCom, NodeType=Inverter, Child[0]=IsActiveTeam-eTeam_XCom)
+Behaviors=(BehaviorName=IsActiveTeam-eTeam_TheLost, NodeType=Condition)
+Behaviors=(BehaviorName=NotActiveTeamTheLost, NodeType=Inverter, Child[0]=IsActiveTeam-eTeam_TheLost)
+Behaviors=(BehaviorName=IsActiveTeam-eTeam_Alien, NodeType=Condition)
+Behaviors=(BehaviorName=NotActiveTeamAlien, NodeType=Inverter, Child[0]=IsActiveTeam-eTeam_Alien)
+Behaviors=(BehaviorName=IsActiveTeam-eTeam_Resistance, NodeType=Condition)
+Behaviors=(BehaviorName=NotActiveTeamResistance, NodeType=Inverter, Child[0]=IsActiveTeam-eTeam_Resistance)

; +++ Randomizers
; Random Overwatches. RandOverwatch75 and RO15 already exist in Vanillla
+Behaviors=(BehaviorName=RandOverwatch30, NodeType=RandFilter, Child[0]=TryOverwatch, Param[0]=30)
+Behaviors=(BehaviorName=RandOverwatch50, NodeType=RandFilter, Child[0]=TryOverwatch, Param[0]=50)
+Behaviors=(BehaviorName=RandOverwatch90, NodeType=RandFilter, Child[0]=TryOverwatch, Param[0]=90)

; +++ The Overwatch Override
; Turns Attacks into Overwatches (with random roll, based on hit chance)
; Use Overwatch Override only on enemy turn - we don't want enemies to go into Overwatch when triggered by Prime reactions
+Behaviors=(BehaviorName=OverwatchOverride, NodeType=Sequence, Child[0]=NotActiveTeamXCom, Child[1]=OverwatchOverrideStart)
; ++ Forking Overwatch chances by Hit Chance
+Behaviors=(BehaviorName=OverwatchOverrideStart, NodeType=Selector, Child[0]=OverwatchOverride10, Child[1]=OverwatchOverride25, Child[2]=OverwatchOverride50, Child[3]=OverwatchOverride75, Child[4]=OverwatchOverrideNVE)
+Behaviors=(BehaviorName=OverwatchOverride10, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow10, Child[2]=RandOverwatchAtCTH10)
+Behaviors=(BehaviorName=OverwatchOverride25, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow25, Child[2]=NOTAllHitChancesBelow10, Child[3]=RandOverwatchAtCTH25)
+Behaviors=(BehaviorName=OverwatchOverride50, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow50, Child[2]=NOTAllHitChancesBelow25, Child[3]=RandOverwatchAtCTH50)
+Behaviors=(BehaviorName=OverwatchOverride75, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow75, Child[2]=NOTAllHitChancesBelow50, Child[3]=RandOverwatchAtCTH75)
+Behaviors=(BehaviorName=OverwatchOverrideNVE, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=NotAmbushMission, Child[2]=RandOverwatch75)
; ++ Forking Overwatch Chances by number of other Overwatchers
; CTH <10
+Behaviors=(BehaviorName=RandOverwatchAtCTH10, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH10, Child[1]=RandSecondOverwatchAtCTH10, Child[2]=RandThirdOverwatchAtCTH10)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH10, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH10First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH10, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH10Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH10, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH10Third)
; CTH <25
+Behaviors=(BehaviorName=RandOverwatchAtCTH25, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH25, Child[1]=RandSecondOverwatchAtCTH25, Child[2]=RandThirdOverwatchAtCTH25)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH25, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH25First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH25, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH25Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH25, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH25Third)
; CTH <50
+Behaviors=(BehaviorName=RandOverwatchAtCTH50, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH50, Child[1]=RandSecondOverwatchAtCTH50, Child[2]=RandThirdOverwatchAtCTH50)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH50, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH50First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH50, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH50Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH50, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH50Third)
; CTH <75
+Behaviors=(BehaviorName=RandOverwatchAtCTH75, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH75, Child[1]=RandSecondOverwatchAtCTH75, Child[2]=RandThirdOverwatchAtCTH75)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH75, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH75First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH75, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH75Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH75, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH75Third)

; The following lines are the percentages for Overwatch that are used by the hitchance based Overwatch Override.
; First/Second/Third refers to the number of Overwatchers already around. 

; CTH<10
+Behaviors=(BehaviorName=RandOverwatchAtCTH10First, NodeType=RandFilter, Child[0]=TryOverwatch10MaybeHunker90, Param[0]=90)
+Behaviors=(BehaviorName=RandOverwatchAtCTH10Second, NodeType=RandFilter, Child[0]=TryOverwatch10MaybeHunker90, Param[0]=75)
+Behaviors=(BehaviorName=RandOverwatchAtCTH10Third, NodeType=RandFilter, Child[0]=TryOverwatch10MaybeHunker90, Param[0]=50)
; CTH<25
+Behaviors=(BehaviorName=RandOverwatchAtCTH25First, NodeType=RandFilter, Child[0]=TryOverwatch30MaybeHunker70, Param[0]=60)
+Behaviors=(BehaviorName=RandOverwatchAtCTH25Second, NodeType=RandFilter, Child[0]=TryOverwatch30MaybeHunker70, Param[0]=50)
+Behaviors=(BehaviorName=RandOverwatchAtCTH25Third, NodeType=RandFilter, Child[0]=TryOverwatch30MaybeHunker70, Param[0]=30)
; CTH<50
+Behaviors=(BehaviorName=RandOverwatchAtCTH50First, NodeType=RandFilter, Child[0]=TryOverwatch65MaybeHunker35, Param[0]=15)
+Behaviors=(BehaviorName=RandOverwatchAtCTH50Second, NodeType=RandFilter, Child[0]=TryOverwatch65MaybeHunker35, Param[0]=10)
+Behaviors=(BehaviorName=RandOverwatchAtCTH50Third, NodeType=RandFilter, Child[0]=TryOverwatch65MaybeHunker35, Param[0]=3)
; CTH<75
+Behaviors=(BehaviorName=RandOverwatchAtCTH75First, NodeType=RandFilter, Child[0]=TryOverwatch90MaybeHunker10, Param[0]=1)
+Behaviors=(BehaviorName=RandOverwatchAtCTH75Second, NodeType=RandFilter, Child[0]=TryOverwatch90MaybeHunker10, Param[0]=1)
+Behaviors=(BehaviorName=RandOverwatchAtCTH75Third, NodeType=RandFilter, Child[0]=TryOverwatch90MaybeHunker10, Param[0]=1)

; if the Overwatch Override triggers based on the random chance above, there is a second chance based check that can make the unit go into Hunker instead of Overwatch.
; There are 4 different probabilties for the Overwatch/Hunker chance and which one is used depends on the CTH bracket we just came from.

+Behaviors=(BehaviorName=TryOverwatch10MaybeHunker90, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=10,      Child[1]=TryCower, Param[1]=90)
+Behaviors=(BehaviorName=TryOverwatch30MaybeHunker70, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=30,      Child[1]=TryCower, Param[1]=70)
+Behaviors=(BehaviorName=TryOverwatch40MaybeHunker60, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=40,      Child[1]=TryCower, Param[1]=60)
+Behaviors=(BehaviorName=TryOverwatch65MaybeHunker35, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=65,      Child[1]=TryCower, Param[1]=35)
+Behaviors=(BehaviorName=TryOverwatch80MaybeHunker20, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=80,      Child[1]=TryCower, Param[1]=20)
+Behaviors=(BehaviorName=TryOverwatch90MaybeHunker10, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=90,      Child[1]=TryCower, Param[1]=10)

; +++ Force Overwatch, Turns Attacks <50%cth into Overwatches, used on Sentinels
+Behaviors=(BehaviorName=ForceOverwatch50, NodeType=Sequence, Child[0]=AllHitChancesBelow50, Child[1]=TryOverwatch)

; +++ Prio: Shoot when Flanking and CTH > 40
+Behaviors=(BehaviorName=ShootWhenFlanking, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectFlankedEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateFlankedEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateFlankedEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateFlankedEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateFlankedEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreFlankedEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreFlankedEnemy_ABA, NodeType=Successor, Child[0]=ScoreFlankedEnemy_ABA)
+Behaviors=(BehaviorName=ScoreFlankedEnemy_ABA, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=TargetNotSacrificeProtected, Child[5]=GenericTargetEvaluations)

; +++ Prio: Shoot when KillShot and CTH > 40
+Behaviors=(BehaviorName=ShootWhenKillShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectKillShotEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateKillShotEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateKillShotEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateKillShotEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateKillShotEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreKillShotEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreKillShotEnemy_ABA, NodeType=Successor, Child[0]=ScoreKillShotEnemy_ABA)
+Behaviors=(BehaviorName=ScoreKillShotEnemy_ABA, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=TargetNotSacrificeProtected, Child[5]=GenericTargetEvaluations)

; +++ Prio: Shoot when sure shot (CTH > 80)
+Behaviors=(BehaviorName=ShootWhenSureShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectSureShotEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectSureShotEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateSureShotEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateSureShotEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateSureShotEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateSureShotEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreSureShotEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreSureShotEnemy_ABA, NodeType=Successor, Child[0]=ScoreSureShotEnemy_ABA)
+Behaviors=(BehaviorName=ScoreSureShotEnemy_ABA, NodeType=Sequence, Child[0]=TargetHitChanceHigh, Child[1]=TargetIsEnemy, Child[2]=TargetNotBound, Child[3]=TargetNotSacrificeProtected, Child[4]=GenericTargetEvaluations)

; +++ Prio: Shoot an Overwatcher when CTH > 40
+Behaviors=(BehaviorName=ShootWhenOverwatcher, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectOverwatchingEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectOverwatchingEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateOverwatchingEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateOverwatchingEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateOverwatchingEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateOverwatchingEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreOverwatchingEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreOverwatchingEnemy_ABA, NodeType=Successor, Child[0]=ScoreOverwatchingEnemy_ABA)
+Behaviors=(BehaviorName=ScoreOverwatchingEnemy_ABA, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Overwatch, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=GenericTargetEvaluations)

; +++ Shoot an Suppressor when CTH > 40
+Behaviors=(BehaviorName=ShootWhenSuppressor, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectSuppressingEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectSuppressingEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateSuppressingEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateSuppressingEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateSuppressingEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateSuppressingEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreSuppressingEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreSuppressingEnemy_ABA, NodeType=Successor, Child[0]=ScoreSuppressingEnemy_ABA)
+Behaviors=(BehaviorName=ScoreSuppressingEnemy_ABA, NodeType=Sequence, Child[0]=TargetIsApplyingEffect-Suppression, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=GenericTargetEvaluations)

; +++ All Prio shots together
+Behaviors=(BehaviorName=TakePriorityShots, NodeType=Selector, Child[0]=TryStandardShotOnDestructible, Child[1]=ShootWhenFlanking, Child[2]=ShootWhenKillShot, Child[3]=ShootWhenSureShot)
+Behaviors=(BehaviorName=ShootPriorityTargets, NodeType=Selector, Child[0]=ShootWhenOverwatcher, Child[1]=ShootWhenSuppressor)

; +++ NotFlanked Versions for Stunlancers
+Behaviors=(BehaviorName=ShootWhenFlanking_NF, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=ShootWhenFlanking)
+Behaviors=(BehaviorName=ShootWhenSureShot_NF, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=ShootWhenSureShot)

; +++ Reacting to suppression
; Am i suppressed?
+Behaviors=(BehaviorName=CheckForSuppressionOnMe, NodeType=Sequence, Child[0]=AffectedByEffect-Suppression, Child[1]=DealWithSuppressionOnMe)
; What are my options? Skill use. Run the Suppression. Hunker Down. Shoot. If all of the previous fail, move by default.
+Behaviors=(BehaviorName=DealWithSuppressionOnMe, NodeType=Selector, Child[0]=UseSkillsWSOM, Child[1]=RunTheSuppression, Child[2]=HunkerDownWSOM, Child[3]=TakeTheShotWSOM, Child[4]=MovementWSOM)
; What skills can i use? Stuff that doesn't use chance to hit. Grenades. Mark Target. Psi. All kinds of stuff. No random roll here, if he has it, he uses it.
+Behaviors=(BehaviorName=UseSkillsWSOM, NodeType=Selector, Child[0]=TryExplosive_JustHitSomething, Child[1]=TryMarkTargetOption_ABA, Child[2]=TryEnergyShieldOnAnyTarget, Child[3]=TryMicroMissiles, Child[4]=TryPsiMindControl, Child[5]=TryDimensionalRift, Child[6]=TryNullLance, Child[7]=TryAcidBlob, Child[8]=TryBlazingPinions, Child[9]=TryTeleportDefensive, Child[10]=TryPsiBomb, Child[11]=TryMindSpinOption, Child[12]=TryPsiReanimation, Child[13]=TryPoisonSpit, Child[14]=TryPoisonSpitSingle, Child[15]=TryGetOverHere)
; Should i run the suppression? Base chance 30 percent. Additional 50% rolls for max health and for 20+ dodge. Running suppression is defensive UNLESS it can lead to a flank.
+Behaviors=(BehaviorName=RunTheSuppression, NodeType=Selector, Child[0]=RunBecauseFullHP, Child[1]=RunBecauseDodge, Child[2]=MovementWSOM30)
+Behaviors=(BehaviorName=RunBecauseFullHP, NodeType=Sequence, Child[0]=HasFullHP, Child[1]=MovementWSOM50)
+Behaviors=(BehaviorName=RunBecauseDodge, NodeType=Sequence, Child[0]=IsDodgy, Child[1]=MovementWSOM50)
+Behaviors=(BehaviorName=MovementWSOM, NodeType=Selector, Child[0]=TryMoveIntoFlank, Child[1]=MoveDefensive)
+Behaviors=(BehaviorName=MovementWSOM10, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=10)
+Behaviors=(BehaviorName=MovementWSOM30, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=30)
+Behaviors=(BehaviorName=MovementWSOM50, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=50)
+Behaviors=(BehaviorName=MovementWSOM70, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=70)
+Behaviors=(BehaviorName=MovementWSOM90, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=90)
; Should i Hunker? Base chance 25 percent. TODO: Additional 50% roll for being an easy target. 
+Behaviors=(BehaviorName=HunkerDownWSOM, NodeType=Selector, Child[0]=MaybeHunker25)
; Should i shoot? Base chance 30 percent. Chance for priority shots is higher.
+Behaviors=(BehaviorName=TakeTheShotWSOM, NodeType=Selector, Child[0]=FlankshotWSOM, Child[1]=KillshotWSOM, Child[2]=SureShotWSOM, Child[3]=StandardShotWSOM)
+Behaviors=(BehaviorName=FlankshotWSOM, NodeType=RandFilter, Child[0]=ShootWhenFlanking, Param[0]=60)
+Behaviors=(BehaviorName=KillshotWSOM, NodeType=RandFilter, Child[0]=ShootWhenKillshot, Param[0]=60)
+Behaviors=(BehaviorName=SureShotWSOM, NodeType=RandFilter, Child[0]=ShootWhenSureShot, Param[0]=70)
+Behaviors=(BehaviorName=StandardShotWSOM, NodeType=RandFilter, Child[0]=TryShootOrReloadOrOverwatch_ABA, Param[0]=30)

; +++ Reacting to being flanked
; Vanilla AI always moves when being flanked, let's do some sanity checks for that
+Behaviors=(BehaviorName=DoIfFlankedMove_ABA, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=FlankedActionSelector_ABA)
; first, determine how dangerous it would be to move
+Behaviors=(BehaviorName=FlankedActionSelector_ABA, NodeType=Selector, Child[0]=ItsSafeToMove, Child[1]=ItsRiskyToMove, Child[2]=ItsSuicideToMove)
+Behaviors=(BehaviorName=ItsSafeToMove, NodeType=Sequence, Child[0]=NoVisibleOverwatchers, Child[1]=NotSuppressed, Child[2]=FlankedAction_Safe)
+Behaviors=(BehaviorName=ItsRiskyToMove, NodeType=Sequence, Child[0]=LessThanTwoVisibleOverwatchers, Child[1]=LessThanTwoVisibleSuppressors, Child[2]=FlankedAction_Risky)
+Behaviors=(BehaviorName=ItsSuicideToMove, NodeType=Sequence, Child[0]=FlankedAction_Suicidal)
; safe ... No Overwatchers, not Suppressed: Try to counterflank, if not possible check if enemy flanked himself already. If so, shoot him. If not, move according to vanilla doctrine.
+Behaviors=(BehaviorName=FlankedAction_Safe, NodeType=Selector, Child[0]=TryToCounterflank, Child[1]=ShootWhenFlanking, Child[2]=FlankedMoveSelector)
; risky ... one Overwatcher and/or Suppressor. Movement actions are penalized with a chance to not take them now. If none are taken, unit will continue with its regular AI tree.
+Behaviors=(BehaviorName=FlankedAction_Risky, NodeType=Selector, Child[0]=TryToCounterflank_Risky, Child[1]=ShootWhenFlanking, Child[2]=FlankedMoveSelector_Risky)
+Behaviors=(BehaviorName=TryToCounterflank_Risky, NodeType=RandFilter, Child[0]=TryToCounterflank, Param[0]=70)
+Behaviors=(BehaviorName=FlankedMoveSelector_Risky, NodeType=RandFilter, Child[0]=FlankedMoveSelector, Param[0]=40)
; suicidal ... more than one Overwatcher or Suppressor. Movement actions are heavily penalized.
+Behaviors=(BehaviorName=FlankedAction_Suicidal, NodeType=Selector, Child[0]=TryToCounterflank_Suicidal, Child[1]=ShootWhenFlanking, Child[2]=FlankedMoveSelector_Suicidal, Child[3]=TryShootOrReload_Suicidal)
+Behaviors=(BehaviorName=TryToCounterflank_Suicidal, NodeType=RandFilter, Child[0]=TryToCounterflank, Param[0]=30)
+Behaviors=(BehaviorName=FlankedMoveSelector_Suicidal, NodeType=RandFilter, Child[0]=FlankedMoveSelector, Param[0]=10)
+Behaviors=(BehaviorName=TryShootOrReload_Suicidal, NodeType=RandFilter, Child[0]=TryShootOrReload, Param[0]=50)
; Try To Counterflank movement: Defensive movement, restricted to tiles that offer a flank shot. 
+Behaviors=(BehaviorName=TryToCounterflank, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToFlanking, Child[3]=FindDestinationWithLoS-MWP_Defensive, Child[4]=SelectAbility-StandardMove)


; +++ Actions
; ++ Movement
; + StayBack movement profile, for Snipers, Puppeteers and other support units
+Behaviors=(BehaviorName=FindDestinationWithLoS-StayBack, NodeType=Action)
+Behaviors=(BehaviorName=MoveStayBack, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=MoveStayBackUnsafe)
+Behaviors=(BehaviorName=MoveStayBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-StayBack, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=DoIfFlankedMove_StayBack, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=MoveStayBack)
; + Moving into Flanks. Uses the Flanking profile and a hard restriction to tiles that lead to a flank.
+Behaviors=(BehaviorName=TryMoveIntoFlank, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToFlanking, Child[3]=FindDestinationWithLoS-MWP_Flanking, Child[4]=SelectAbility-StandardMove)

; ++ Ability Use
+Behaviors=(BehaviorName=IsAbilityAvailable-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-RemoteStart, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-LaunchGrenade, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-RocketLauncher, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-LightningHands, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Faceoff, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-FireTazer, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Demolition, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Stealth, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-ChainShot, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-HunkerDownNoAnim, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-DistressCall, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SmokeRain, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-ReinforceABA, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-FrenzyTrigger, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Ragnarok, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SpawnABAChryssalidM1ForMommy, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SpawnABAChryssalidM2ForMommy, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SpawnABAChryssalidM3ForMommy, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SpawnABAChryssalidM4ForMommy, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-FinishHim, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Cleanse, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Muton_PersonalShield, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Muton_WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-LightEmUp_ABA, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Codex_PersonalShield, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Firebreath, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AdvDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AdvDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AdvDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AdvDroneHeal, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-SkirmisherGrapple, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Justice, NodeType=Condition)

+Behaviors=(BehaviorName=IsAbilityReady-AdvDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AdvDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AdvDroneHeal, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AdvDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AdvFuseProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-GremlinRepair, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-GremlinHeal, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AidProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-ReinforceABA, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-Ragnarok, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-FinishHim, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-Muton_WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LightEmUp_ABA, NodeType=Condition)

+Behaviors=(BehaviorName=SelectAbility-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-RemoteStart, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AidProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-FireTazer, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Faceoff, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-RocketLauncher, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-LaunchGrenade, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-GremlinHeal, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-GremlinRepair, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AdvFuseProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Demolition, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-ChainShot, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Stealth, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-ReinforceABA, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Cleanse, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-DistressCall, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-HunkerDownNoAnim, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SmokeRain, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-FrenzyTrigger, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Ragnarok, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Firebreath, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-TriggerSuperposition, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Codex_PersonalShield, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-LightEmUp_ABA, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Muton_WarCry, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-Muton_PersonalShield, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-FinishHim, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SpawnABAChryssalidM1ForMommy, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SpawnABAChryssalidM2ForMommy, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SpawnABAChryssalidM3ForMommy, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SpawnABAChryssalidM4ForMommy, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AdvDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AdvDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AdvDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AdvDroneHeal, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-SkirmisherGrapple, NodeType=Action, param[0]=UseDestination)
+Behaviors=(BehaviorName=SelectAbility-Justice, NodeType=Action)

; ++ Ability targeting, single
+Behaviors=(BehaviorName=SetTargetStack-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Faceoff, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-FireTazer, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AidProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-GremlinHeal, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-GremlinRepair, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvFuseProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Demolition, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-ChainShot, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-LightEmUp_ABA, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Muton_WarCry, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Cleanse, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-FinishHim, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AdvDroneHeal, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Justice, NodeType=Action)

+Behaviors=(BehaviorName=HasValidTarget-Justice, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvDroneHeal, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-FinishHim, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-Cleanse, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-Muton_WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-ChainShot, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-LightEmUp_ABA, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-Faceoff, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-LightningHands, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-FireTazer, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AidProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-GremlinHeal, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-GremlinRepair, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AdvFuseProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-Demolition, NodeType=Condition)

; ++ Ability targeting, AoE
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RemoteStartProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-SmokeGrenadeProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-FirebreathProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-BlazingPinionsProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-SmokeRainProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-SmokeScreenProfile, NodeType=Action)

+Behaviors=(BehaviorName=SelectAoETarget-SmokeGrenadeProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RemoteStartProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-FirebreathProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-BlazingPinionsProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-SmokeRainProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-SmokeScreenProfile, NodeType=Action)

; ++ Generic Target Selectors
+Behaviors=(BehaviorName=SelectTargetForSniperStandardFire, NodeType=Sequence, Child[0]=SetTargetStack-SniperStandardFire, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-SniperStandardFire)
+Behaviors=(BehaviorName=SelectTargetForTazer, NodeType=Sequence, Child[0]=SetTargetStack-FireTazer, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-FireTazer)
+Behaviors=(BehaviorName=SelectTargetForFaceoff, NodeType=Sequence, Child[0]=SetTargetStack-Faceoff, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Faceoff)
+Behaviors=(BehaviorName=SelectTargetForLightningHands, NodeType=Sequence, Child[0]=SetTargetStack-LightningHands, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-LightningHands)
+Behaviors=(BehaviorName=SelectTargetForAdvFuseProtocol, NodeType=Sequence, Child[0]=SetTargetStack-AdvFuseProtocol, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-AdvFuseProtocol)
+Behaviors=(BehaviorName=SelectTargetForDemolition, NodeType=Sequence, Child[0]=SetTargetStack-Demolition, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Demolition)
+Behaviors=(BehaviorName=SelectTargetForChainShot, NodeType=Sequence, Child[0]=SetTargetStack-ChainShot, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-ChainShot)
+Behaviors=(BehaviorName=ABA_SelectTargetForMeleeStun, NodeType=Sequence, Child[0]=SetTargetStack-AdvDroneMeleeStun, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-AdvDroneMeleeStun)
+Behaviors=(BehaviorName=ABA_SelectTargetForShock, NodeType=Sequence, Child[0]=SetTargetStack-AdvDroneShock, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-AdvDroneShock)
+Behaviors=(BehaviorName=SelectJusticeTarget, NodeType=Sequence, Child[0]=SetTargetStack-Justice, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Justice)
+Behaviors=(BehaviorName=SelectTargetForFinishHim, NodeType=Sequence, Child[0]=SetTargetStack-FinishHim, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-FinishHim)

; ++ Movement Restrictors

+Behaviors=(BehaviorName=RestrictToAbilityRange-AdvDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-SkirmisherGrapple, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-AdvDroneHeal, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-AdvDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-AdvDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LightEmUp_ABA, NodeType=Action)

+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-AdvDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-AdvDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-AdvDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-AdvDroneHeal, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LightEmUp_ABA, NodeType=Action)

; "Try" nodes, these are the ones that go into Action Selectors
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_Sniper, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable_Sniper, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=TryRemoteStart, NodeType=Sequence, Child[0]=IsAbilityAvailable-RemoteStart, Child[1]=FindPotentialAoETargets-RemoteStartProfile, Child[2]=SelectAoETarget-RemoteStartProfile, Child[3]=SelectAbility-RemoteStart)
+Behaviors=(BehaviorName=TryLightningHands, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightningHands, Child[1]=SelectTargetForLightningHands, Child[2]=SelectAbility-LightningHands)
+Behaviors=(BehaviorName=TryFaceoff, NodeType=Sequence, Child[0]=IsAbilityAvailable-Faceoff, Child[1]=MoreThanTwoEnemiesVisible, Child[2]=SelectTargetForFaceoff, Child[3]=SelectAbility-Faceoff)
+Behaviors=(BehaviorName=TryTazer, NodeType=Sequence, Child[0]=IsAbilityAvailable-FireTazer, Child[1]=SelectTargetForTazer, Child[2]=SelectAbility-FireTazer)
+Behaviors=(BehaviorName=TryAidProtocol, NodeType=Sequence, Child[0]=IsAbilityReady-AidProtocol, Child[1]=SelectTargetForAidProtocol, Child[2]=SelectAbility-AidProtocol)
+Behaviors=(BehaviorName=TryGremlinHeal, NodeType=Sequence, Child[0]=IsAbilityReady-GremlinHeal, Child[1]=SelectTargetForGremlinHeal, Child[2]=SelectAbility-GremlinHeal)
+Behaviors=(BehaviorName=TryStealth, NodeType=Sequence, Child[0]=IsAbilityAvailable-Stealth, Child[1]=SelectAbility-Stealth)
+Behaviors=(BehaviorName=TryAdvFuseProtocol, NodeType=Sequence, Child[0]=IsAbilityReady-AdvFuseProtocol, Child[1]=SelectTargetForAdvFuseProtocol, Child[2]=SelectAbility-AdvFuseProtocol)
+Behaviors=(BehaviorName=TryGremlinRepair, NodeType=Sequence, Child[0]=IsAbilityReady-GremlinRepair, Child[1]=SelectTargetForGremlinRepair, Child[2]=SelectAbility-GremlinRepair)
+Behaviors=(BehaviorName=TrySmokeGrenade, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-SmokeGrenadeProfile, Child[2]=SelectAoETarget-SmokeGrenadeProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryDistress, NodeType=Sequence, Child[0]=IsAbilityAvailable-DistressCall, Child[1]=SelectAbility-DistressCall)
+Behaviors=(BehaviorName=TryMarkTargetOption_ABA, NodeType=Selector, Child[0]=ShootWhenFlanking, Child[1]=ShootWhenSureShot, Child[2]=TryMarkTargetOption)
+Behaviors=(BehaviorName=TrySmokeScreen, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-SmokeScreenProfile, Child[2]=SelectAoETarget-SmokeScreenProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TrySmoke, NodeType=Sequence, Child[0]=IsAbilityAvailable-SmokeRain, Child[1]=FindPotentialAoETargets-SmokeRainProfile, Child[2]=SelectAoETarget-SmokeRainProfile, Child[3]=SelectAbility-SmokeRain)
+Behaviors=(BehaviorName=TryFrenzyTrigger, NodeType=Sequence, Child[0]=IsAbilityAvailable-FrenzyTrigger, Child[1]=SelectAbility-FrenzyTrigger)
+Behaviors=(BehaviorName=TryBlazingPinions_aggro, NodeType=Sequence, Child[0]=IsAbilityAvailable-BlazingPinionsStage1, Child[1]=FindPotentialAoETargets-BlazingPinionsProfile_aggro, Child[2]=SelectAoETarget-BlazingPinionsProfile_aggro, Child[3]=SelectAbility-BlazingPinionsStage1)
+Behaviors=(BehaviorName=TryFirebreath, NodeType=Sequence, Child[0]=IsAbilityAvailable-Firebreath, Child[1]=FindPotentialAoETargets-FirebreathProfile, Child[2]=SelectAoETarget-FirebreathProfile, Child[3]=SelectAbility-Firebreath)
+Behaviors=(BehaviorName=TryPersonalShield_Codex, NodeType=Sequence, Child[0]=IsAbilityAvailable-Codex_PersonalShield, Child[1]=SelectAbility-Codex_PersonalShield)
+Behaviors=(BehaviorName=TryWarCryOnMultipleTargets_ABA, NodeType=Sequence, Child[0]=IsAbilityAvailable-Muton_WarCry, Child[1]=NotWarCried, Child[2]=HasMultipleWarCryTargets_ABA, Child[3]=SelectAbility-Muton_WarCry)
+Behaviors=(BehaviorName=TryWarCryOnFewTargets_ABA, NodeType=Sequence, Child[0]=IsAbilityAvailable-Muton_WarCry, Child[1]=NotWarCried, Child[2]=HasFewWarCryTargets_ABA, Child[3]=SelectAbility-Muton_WarCry)
+Behaviors=(BehaviorName=TryPersonalShield_ABA, NodeType=Sequence, Child[0]=IsAbilityAvailable-Muton_PersonalShield, Child[1]=SelectAbility-Muton_PersonalShield)
+Behaviors=(BehaviorName=TryCleanse, NodeType=Selector, Child[0]=TryCleanseMindControl, Child[1]=TryCleansePanicked, Child[2]=TryCleanseDisoriented) 
+Behaviors=(BehaviorName=TryFinishHim, NodeType=Sequence, Child[0]=IsAbilityAvailable-FinishHim, Child[1]=SelectTargetForFinishHim, Child[2]=SelectAbility-FinishHim)
+Behaviors=(BehaviorName=TryJustice, NodeType=Sequence, Child[0]=IsAbilityAvailable-Justice, Child[1]=SelectJusticeTarget, Child[2]=SelectAbility-Justice)

; Two versions of extended TryShootOrReloadOrOverwatch: "ABA" has the priority shots. "Adv" has those and also the extra check for Hunker on Disorient
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_ABA, NodeType=Selector, Child[0]=ShootWhenFlanking, Child[1]=OverwatchOverride, Child[2]=ShootWhenKillShot, Child[3]=ShootWhenSuppressor, Child[4]=ShootWhenOverwatcher, Child[5]=ShootWhenSureShot, Child[6]=CheckForInitiateSuppression, Child[7]=ConsiderTakingOverwatch, Child[8]=ShootIfAvailable, Child[9]=NeedsReload)
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_Adv, NodeType=Selector, Child[0]=HunkerWhenDisoriented, Child[1]=TryShootOrReloadOrOverwatch_ABA)

; These merge Rockets, launched Grenades and thrown grenades together into handy "TryExplosive" behaviors
+Behaviors=(BehaviorName=TryExplosive_prio, NodeType=Selector, Child[0]=TryRocketLauncher_prio, Child[1]=TryGrenadeLauncher_prio, Child[2]=TryGrenade) 
+Behaviors=(BehaviorName=TryExplosive_norm, NodeType=Selector, Child[0]=TryRocketLauncher_norm, Child[1]=TryGrenadeLauncher_norm, Child[2]=TryGrenade) 
+Behaviors=(BehaviorName=TryExplosive_aggro, NodeType=Selector, Child[0]=TryRocketLauncher_aggro, Child[1]=TryGrenadeLauncher_aggro, Child[2]=TryGrenade_Aggressive) 
+Behaviors=(BehaviorName=TryExplosive_JustHitSomething, NodeType=Selector, Child[0]=TryRocketLauncher_aggro, Child[1]=TryGrenadeLauncher_aggro, Child[2]=TryGrenade_JustHitSomething) 

; Other ability helpers, anything that's off the Standard

; + Basic Sniper fire
+Behaviors=(BehaviorName=ShootIfAvailable_Sniper, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperStandardFire, Child[1]=SelectTargetForSniperStandardFire, Child[2]=SelectAbility-SniperStandardFire)
; + Aid Protocol
+Behaviors=(BehaviorName=SelectTargetForAidProtocol, NodeType=Sequence, Child[0]=SetTargetStack-AidProtocol, Child[1]=SelectTargetForAid, Child[2]=HasValidTarget-AidProtocol)
+Behaviors=(BehaviorName=SelectTargetForAid, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForAid, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForAid, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=EvaluateForAid)
+Behaviors=(BehaviorName=EvaluateForAid, NodeType=Sequence, Child[0]=ScoreByHP)
; + Heal Protocol
+Behaviors=(BehaviorName=SelectTargetForGremlinHeal, NodeType=Sequence, Child[0]=SetTargetStack-GremlinHeal, Child[1]=SelectTargetForHeal, Child[2]=HasValidTarget-GremlinHeal)
+Behaviors=(BehaviorName=SelectTargetForHeal, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForHeal, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForHeal, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=EvaluateForHeal)
+Behaviors=(BehaviorName=EvaluateForHeal, NodeType=Sequence, Child[0]=ScoreByHP)
; + Repair Protocol
+Behaviors=(BehaviorName=SelectTargetForGremlinRepair, NodeType=Sequence, Child[0]=SetTargetStack-GremlinRepair, Child[1]=SelectTargetForRepair, Child[2]=HasValidTarget-GremlinRepair)
+Behaviors=(BehaviorName=SelectTargetForRepair, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForRepair, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForRepair, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=EvaluateForRepair)
+Behaviors=(BehaviorName=EvaluateForRepair, NodeType=Sequence, Child[0]=ScoreByHP)


; +++ Grenades and other Explosives
; ++ Throw single target grenade when only bad shots (<50%) available
+Behaviors=(BehaviorName=TryGrenadeSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-GrenadeSingleProfile, Child[2]=SelectAoETarget-GrenadeSingleProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryGrenadeSingleOnBadShot, NodeType=Sequence, Child[0]=AllHitChancesBelow50, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-GrenadeSingleProfile, Child[3]=SelectAoETarget-GrenadeSingleProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryGrenade_Aggressive, NodeType=Selector, Child[0]=TryGrenade, Child[1]=TryGrenadeSingleOnBadShot)
+Behaviors=(BehaviorName=TryGrenade_JustHitSomething, NodeType=Selector, Child[0]=TryGrenade, Child[1]=TryGrenadeSingle)
; ++ Rocket Launcher
+Behaviors=(BehaviorName=TryRocketLauncher_prio, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile_prio, Child[2]=SelectAoETarget-RocketLauncherProfile_prio, Child[3]=SelectAbility-RocketLauncher)
+Behaviors=(BehaviorName=TryRocketLauncher_norm, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile_norm, Child[2]=SelectAoETarget-RocketLauncherProfile_norm, Child[3]=SelectAbility-RocketLauncher)
+Behaviors=(BehaviorName=TryRocketLauncher_aggro, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile_aggro, Child[2]=SelectAoETarget-RocketLauncherProfile_aggro, Child[3]=SelectAbility-RocketLauncher)
; ++ Grenade Launcher
+Behaviors=(BehaviorName=TryGrenadeLauncher_prio, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile_prio, Child[2]=SelectAoETarget-GrenadeLauncherProfile_prio, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncher_norm, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile_norm, Child[2]=SelectAoETarget-GrenadeLauncherProfile_norm, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncher_aggro, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile_aggro, Child[2]=SelectAoETarget-GrenadeLauncherProfile_aggro, Child[3]=SelectAbility-LaunchGrenade)

; +++ TryCallReinforcements behaviour 
; --- by Rayman!, from his "ADVENT Officer - Call Reinforcements" mod
+Behaviors=(BehaviorName=TryCallReinforcementsABA, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-ReinforceABA, \\
	Child[1]=MultipleEnemiesVisible, \\
	Child[2]=Reinforce_HasNoAllies, \\
	Child[3]=SelectAbility-ReinforceABA)
+Behaviors=(BehaviorName=Reinforce_HasNoAllies, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]="<", Param[2]=1)

; +++ Demolition
; Demo is used when a unit is in cover and difficult to hit (chance <50), but not completely impossible to hit. Max Hitchance needs between the two thresholds. If it is, the unit with best hitchance is chosen (usually, uses generic eval).
+Behaviors=(BehaviorName=TryDemolition, NodeType=Sequence, Child[0]=IsAbilityAvailable-Demolition, Child[1]=AllHitChancesBelowDemoThreshold, Child[2]=AllHitChancesOverDemoThreshold, Child[3]=SelectTargetForDemolition, Child[4]=SelectAbility-Demolition)
+Behaviors=(BehaviorName=AllHitChancesOverDemoThreshold, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="10")
+Behaviors=(BehaviorName=AllHitChancesBelowDemoThreshold, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="50")

; +++ ChainShot
; Has a minimum hitchance because of the aim penalty.
+Behaviors=(BehaviorName=TryChainShot_ABA, NodeType=Sequence, Child[0]=IsAbilityAvailable-ChainShot, Child[1]=AllHitChancesOverChainShotThreshold, Child[2]=SelectTargetForChainShot, Child[3]=SelectAbility-ChainShot)
+Behaviors=(BehaviorName=AllHitChancesOverChainShotThreshold, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="40")

; +++ Aggressive Move, restricted to Flanking
+Behaviors=(BehaviorName=MoveAggressiveFlankUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToFlanking, Child[3]=FindDestinationWithLoS-MWP_Aggressive, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveAggressiveFlank, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=MoveAggressiveFlankUnsafe)

; +++ Alien Hunker, includes compatibility with the mod "Everyone Gets Hunker Down" by Advent Avenger
+Behaviors=(BehaviorName=DoCowerNoAnim, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunkerDownNoAnim, Child[1]=SelectAbility-HunkerDownNoAnim)
+Behaviors=(BehaviorName=TryCower, NodeType=Selector, Child[0]=DoCower, Child[1]=DoCowerNoAnim)

; +++ Using Hunker Down ("CheckForHunker" is the one for the AI trees)
; Random actions
+Behaviors=(BehaviorName=MaybeHunker10, NodeType=RandFilter, Child[0]=TryCower, Param[0]=10)
+Behaviors=(BehaviorName=MaybeHunker25, NodeType=RandFilter, Child[0]=TryCower, Param[0]=25)
+Behaviors=(BehaviorName=MaybeHunker50, NodeType=RandFilter, Child[0]=TryCower, Param[0]=50)
+Behaviors=(BehaviorName=MaybeHunker75, NodeType=RandFilter, Child[0]=TryCower, Param[0]=75)
+Behaviors=(BehaviorName=MaybeHunker90, NodeType=RandFilter, Child[0]=TryCower, Param[0]=90)
; No Hunkering when VIP or Evac is in sight. No Hunkering when it's the last enemy on the board.
+Behaviors=(BehaviorName=CheckForHunker, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=NotNearEvacOrVIP, Child[2]=ConsiderHunker)
+Behaviors=(BehaviorName=NoVIPVisible, NodeType=Inverter, Child[0]=VIPVisible)
+Behaviors=(BehaviorName=NoEvacVisible, NodeType=Inverter, Child[0]=EvacWithinVisRange)
+Behaviors=(BehaviorName=NotNearEvacOrVIP, NodeType=Sequence, Child[0]=NoVIPVisible, Child[1]=NoEvacVisible)
; All conditions together, to be linked into "CheckForHunker". 
+Behaviors=(BehaviorName=ConsiderHunker, NodeType=Selector, Child[0]=HunkerWhenDisoriented, Child[1]=HunkerWhenWounded)
; Hunker chance if disoriented. Default 75 percent
+Behaviors=(BehaviorName=HunkerWhenDisoriented, NodeType=Sequence, Child[0]=AffectedByEffect-Disoriented, Child[1]=MaybeHunker75)
; Hunker chance when wounded.
+Behaviors=(BehaviorName=HunkerWhenWounded, NodeType=Selector, Child[0]=HunkerWhenBloodied, Child[1]=HunkerWhenLowHP)
+Behaviors=(BehaviorName=HunkerWhenBloodied, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=NotLowHP, Child[2]=MaybeHunker25)
+Behaviors=(BehaviorName=HunkerWhenLowHP, NodeType=Sequence, Child[0]=HasLowHP, Child[1]=MaybeHunker50)

; +++ Using Suppression
; Countersuppress when enemy suppressors or overwatchers are around 
+Behaviors=(BehaviorName=CounterSuppress, NodeType=Selector, Child[0]=SuppressSuppressors, Child[1]=SuppressOverwatchers)
+Behaviors=(BehaviorName=SuppressSuppressors, NodeType=Sequence, Child[0]=HasVisibleSuppressors, Child[1]=FindSuppressionTarget)
+Behaviors=(BehaviorName=SuppressOverwatchers, NodeType=Sequence, Child[0]=HasVisibleOverwatchers, Child[1]=FindSuppressionTarget)
+Behaviors=(BehaviorName=HasVisibleSuppressors, NodeType=Inverter, Child[0]=NoVisibleSuppressors)
+Behaviors=(BehaviorName=HasVisibleOverwatchers, NodeType=Inverter, Child[0]=NoVisibleOverwatchers)
; Suppress closest when only bad shots
+Behaviors=(BehaviorName=MaybeSuppressClosestOnBadShot, NodeType=Sequence, Child[0]=AllHitChancesBelow25, Child[1]=RollForSuppress)
+Behaviors=(BehaviorName=RollForSuppress, NodeType=RandFilter, Child[0]=TrySuppressClosest, Param[0]=50)
; This one is for Captains and Mutons. Those initiate Suppression if they have enough allies on the field to profit from the cover fire. 
+Behaviors=(BehaviorName=CheckForInitiateSuppression, NodeType=Selector, Child[0]=CounterSuppress, Child[1]=SuppressWhenManyAllies, Child[2]=SuppressWhenTwoAllies, Child[3]=SuppressWhenOneAlly, Child[4]=CheckForJoiningSuppression)
+Behaviors=(BehaviorName=SuppressWhenManyAllies, NodeType=Sequence, Child[0]=ManyAlliesVisible, Child[1]=MaybeSuppress90)
+Behaviors=(BehaviorName=SuppressWhenTwoAllies, NodeType=Sequence, Child[0]=TwoAlliesVisible, Child[1]=MaybeSuppress50)
+Behaviors=(BehaviorName=SuppressWhenOneAlly, NodeType=Sequence, Child[0]=OneAllyVisible, Child[1]=MaybeSuppress10)
+Behaviors=(BehaviorName=OneAllyVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]="=", Param[2]=1)
+Behaviors=(BehaviorName=TwoAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]="=", Param[2]=2)
+Behaviors=(BehaviorName=ManyAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=2)
+Behaviors=(BehaviorName=MaybeSuppress10, NodeType=RandFilter, Child[0]=FindSuppressionTarget, Param[0]=10)
+Behaviors=(BehaviorName=MaybeSuppress50, NodeType=RandFilter, Child[0]=FindSuppressionTarget, Param[0]=50)
+Behaviors=(BehaviorName=MaybeSuppress90, NodeType=RandFilter, Child[0]=FindSuppressionTarget, Param[0]=90)
; This one is for everyone and is worked into the ShootOrReloadOrOverwatch thingy. Enemies only suppress when they have only bad shots, but will likely fall in when any suppression is already happening. Of course, they also use countersuppression.
;+Behaviors=(BehaviorName=CheckForJoiningSuppression, NodeType=Selector, Child[0]=CounterSuppress, Child[1]=FindAnyFriendlySuppressors, Child[2]=MaybeSuppressClosestOnBadShot)
; Disabled the Joining Routine for now, it seems to make problems. Stripped this Suppression behavior down to CounterSuppression and BadShot
+Behaviors=(BehaviorName=CheckForJoiningSuppression, NodeType=Selector, Child[0]=CounterSuppress, Child[1]=MaybeSuppressClosestOnBadShot)

+Behaviors=(BehaviorName=FindAnyFriendlySuppressors, NodeType=RepeatUntilFail, Child[0]=CheckForFriendlySuppressor)
+Behaviors=(BehaviorName=CheckForFriendlySuppressor, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsAlly, Child[2]=TargetIsApplyingEffect-Suppression, Child[3]=MaybeSuppress50)
; Find suppression target
+Behaviors=(BehaviorName=FindSuppressionTarget, NodeType=Selector, Child[0]=CounterSuppressOverwatcher, Child[1]=CounterSuppressSuppressor, Child[2]=TrySuppressClosest)
+Behaviors=(BehaviorName=CounterSuppressOverwatcher, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectOverwatchingEnemyTarget_Supp, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=SelectOverwatchingEnemyTarget_Supp, NodeType=Sequence, Child[0]=SetTargetStack-Suppression, Child[1]=EvaluateOverwatchingEnemyTargets_Supp, Child[2]=HasValidTarget-Suppression)
+Behaviors=(BehaviorName=EvaluateOverwatchingEnemyTargets_Supp, NodeType=RepeatUntilFail, Child[0]=EvaluateOverwatchingEnemies_Supp)
+Behaviors=(BehaviorName=EvaluateOverwatchingEnemies_Supp, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreOverwatchingEnemy_Supp, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreOverwatchingEnemy_Supp, NodeType=Successor, Child[0]=ScoreOverwatchingEnemy_Supp)
+Behaviors=(BehaviorName=ScoreOverwatchingEnemy_Supp, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Overwatch, Child[1]=TargetIsEnemy, Child[2]=GenericTargetEvaluations)
+Behaviors=(BehaviorName=CounterSuppressSuppressor, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectSuppressingEnemyTarget_Supp, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=SelectSuppressingEnemyTarget_Supp, NodeType=Sequence, Child[0]=SetTargetStack-Suppression, Child[1]=EvaluateSuppressingEnemyTargets_Supp, Child[2]=HasValidTarget-Suppression)
+Behaviors=(BehaviorName=EvaluateSuppressingEnemyTargets_Supp, NodeType=RepeatUntilFail, Child[0]=EvaluateSuppressingEnemies_Supp)
+Behaviors=(BehaviorName=EvaluateSuppressingEnemies_Supp, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreSuppressingEnemy_Supp, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreSuppressingEnemy_Supp, NodeType=Successor, Child[0]=ScoreSuppressingEnemy_Supp)
+Behaviors=(BehaviorName=ScoreSuppressingEnemy_Supp, NodeType=Sequence, Child[0]=TargetIsApplyingEffect-Suppression, Child[1]=TargetIsEnemy, Child[2]=GenericTargetEvaluations)

; --- Target Evaluations for Psi Powers
-Behaviors=(BehaviorName=EvaluateForStasis, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamResistance, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_100, Child[8]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=EvaluateForStasis, NodeType=Sequence, Child[0]=TargetIsNotLost, Child[1]=TargetIsNotCivilian, Child[2]=TargetNotTeamResistance, Child[3]=TargetIsEnemy, Child[4]=TargetIsNotEnemyVIP, Child[5]=TargetNotBoundOrPanicked, Child[6]=TargetIsAttackable, Child[7]=TargetScoreByScaledDistance-1, Child[8]=AddToTargetScore_100, Child[9]=AddSmallRandomTargetScore)

; --- Chosen Generic Action
-Behaviors=(BehaviorName=ChosenGeneric, NodeType=Selector,      Child[0]=GenericAbilityRoot,      Child[1]=DoIfFlankedMove,      Child[2]=TryMoveThenGrenade,      Child[3]=TryShootOrReloadOrOverwatch,      Child[4]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=ChosenGeneric, NodeType=Selector,      Child[0]=GenericAbilityRoot,      Child[1]=DoIfFlankedMove,      Child[2]=TakePriorityShots,      Child[3]=TryMoveThenGrenade,      Child[4]=TryShootOrReloadOrOverwatch_ABA,      Child[5]=HuntEnemyWithCover)
